#!/usr/bin/python3
import os
import shutil
import sys

try:
    from PIL import Image
except ImportError as error:
    print(error.msg)


GITHUB_USERNAME = "wdsrocha"
GITHUB_REPOSITORY = "wallpapers"
IMAGE_EXTENSIONS = (".png", ".jpg", ".jpeg")
OVERWRITE_WARNING = (
    "[comment]: # (###################################################)\n"
    "[comment]: # (### WARNING:  Do not edit this file, changes will)\n"
    "[comment]: # (### be overwritten by make_gallery.py!)\n"
    "[comment]: # (###################################################)\n")


def parse_path(file_path):
    return file_path


def progressbar(it, prefix="", size=60, file=sys.stdout):
    """https://stackoverflow.com/a/34482761/7651928"""
    count = len(it)

    def show(j):
        x = int((size * j) / count)
        file.write(f"{prefix}[{'#' * x}{'.' * (size-x)}] {j}/{count}\r")
        file.flush()

    show(0)
    for i, item in enumerate(it):
        yield item
        show(i+1)
    file.write("\n")


def get_all_file_paths(top_dirname):
    file_paths = []
    for dirname, _, filenames in os.walk(top_dirname):
        for filename in filenames:
            if filename.lower().endswith(IMAGE_EXTENSIONS):
                file_path = os.path.join(dirname, filename)
                file_paths.append(file_path)
    return file_paths


def to_thumbnail_filename(filename):
    return f"thumbnail_{parse_path(filename)}"


def to_thumbnail(image_path, thumbnail_dirname, thumbnail_size):
    filename = os.path.basename(image_path)
    thumbnail_filename = to_thumbnail_filename(filename)
    thumbnail_path = os.path.join(thumbnail_dirname, thumbnail_filename)
    # TODO: clone directory structure, so duplicated names can be handled by
    # the OS.
    # BUG: if two files have the same name, only the first one will appear
    if os.path.exists(thumbnail_path):
        return
    im = Image.open(image_path)
    im = im.convert("RGB")
    im.thumbnail(thumbnail_size, Image.ANTIALIAS)
    im.save(thumbnail_path)


def convert_images_to_thumbnail(image_paths, thumbnails_dirname,
                                thumbnail_size):
    print("Converting images to thumbnail...")
    for image_path in progressbar(image_paths):
        to_thumbnail(image_path, thumbnails_dirname, thumbnail_size)
    print("Done.")


def setup_thumbnails_dir(image_paths, thumbnails_dirname, thumbnail_size):
    # TODO: if dir already exists, ask if user wants to proceed or cancel
    convert_images_to_thumbnail(image_paths, thumbnails_dirname,
                                thumbnail_size)


def to_md_section(section_name):
    return f"### {section_name}\n"


def get_raw_image_url(image_path):
    image_path = parse_path(image_path)
    return (
        "https://raw.githubusercontent.com/"
        f"{GITHUB_USERNAME}/{GITHUB_REPOSITORY}/master/{image_path}")


def make_md_gallery(md_file_path, image_paths, thumbnails_dirname):
    md_file = open(md_file_path, "w")
    last_image_dirname = str()
    for image_path in image_paths:
        image_dirname, filename = os.path.split(image_path)
        if image_dirname != last_image_dirname:
            if last_image_dirname:
                md_file.write("\n")
            md_file.write(to_md_section(image_dirname.split('/')[1]))
            md_file.write("\n")
            last_image_dirname = image_dirname
        thumbnail_path = os.path.join(
            thumbnails_dirname,
            to_thumbnail_filename(filename))
        raw_image_url = get_raw_image_url(image_path)
        md_file.write("[![{}]({})]({})\n".format(
            thumbnail_path, thumbnail_path, raw_image_url))
    md_file.close()


def assemble_files(file_paths):
    """Assemble files and adds a overwrite warning plus a table of contents"""
    assembled_path = "README.md"
    assembled_file = open(assembled_path, "w+")
    assembled_file.write(OVERWRITE_WARNING + "\n")
    for i, path in enumerate(file_paths):
        if i:
            assembled_file.write("\n")
        with open(path) as block_file:
            assembled_file.write(block_file.read())
    assembled_file.close()

    print("Adding table of contents...")
    # TODO: find alternative solution to supress echo on gh-md-toc script
    os.system((
        f"./gh-md-toc --insert {assembled_path} |"
        "tail -n +1 |"
        "grep -q ' ';"
        f"rm {assembled_path}.*"))
    print("Done.")


def main():
    # TODO: add argparse
    wallpapers_dirname = "wallpapers"
    thumbnails_dirname = "thumbnails"
    thumbnail_size = (128, 128)
    header_path = "readme_header.md"
    gallery_path = "readme_gallery.md"
    footer_path = "readme_footer.md"
    is_update = False

    if len(sys.argv) > 1:
        name, option = sys.argv[:2]
        if option == "--help":
            print()
            print(f"Markdown image gallery generator {name}")
            print("")
            print("Usage:")
            print(f"  python3 {name}                         Generate thumbnails and creates markdown file")
            print(f"  python3 {name} update                  Updates markdown file without generating thumbnails")
            print(f"  python3 {name} --help                  Show help")
            print()
            return
        elif option == "--update":
            is_update = True

    image_paths = get_all_file_paths(wallpapers_dirname)
    if not is_update:
        setup_thumbnails_dir(image_paths, thumbnails_dirname, thumbnail_size)
    make_md_gallery(gallery_path, image_paths, thumbnails_dirname)
    assemble_files([header_path, gallery_path, footer_path])
    os.system(f"rm {gallery_path}")


if __name__ == "__main__":
    main()
